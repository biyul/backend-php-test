<?php

use AskNicely\Exception\ValidationException;
use AskNicely\Model\Todo;
use DerAlex\Silex\YamlConfigServiceProvider;
use Illuminate\Database\Capsule\Manager as Capsule;
use PHPUnit\Framework\TestCase;
use Silex\Application;
use Silex\Provider\SessionServiceProvider;
use Silex\Provider\TwigServiceProvider;
use Silex\Provider\UrlGeneratorServiceProvider;
use Silex\Provider\ValidatorServiceProvider;
use Silex\Provider\ServiceControllerServiceProvider;
use Silex\Provider\HttpFragmentServiceProvider;
use Silex\Provider\DoctrineServiceProvider;


class TodoTest extends TestCase
{
    protected $capsule;

    public function setUp()
    {
        $app = new Application();
        $app->register(new SessionServiceProvider());
        $app->register(new UrlGeneratorServiceProvider());
        $app->register(new ValidatorServiceProvider());
        $app->register(new ServiceControllerServiceProvider());
        $app->register(new TwigServiceProvider());
        $app->register(new HttpFragmentServiceProvider());

        $app->register(new YamlConfigServiceProvider(__DIR__.'/../config/config.yml'));
        $app->register(new DoctrineServiceProvider, array(
            'db.options' => array(
                'driver'    => 'pdo_mysql',
                'host'      => $app['config']['database']['host'],
                'dbname'    => $app['config']['database']['dbname'],
                'user'      => $app['config']['database']['user'],
                'password'  => $app['config']['database']['password'],
                'charset'   => 'utf8',
            ),
        ));
        $this->capsule = new Capsule;
        $this->capsule->addConnection([
            'driver' => 'mysql',
            'host' => $app['config']['database']['host'],
            'database' => $app['config']['database']['dbname'],
            'username' => $app['config']['database']['user'],
            'password' => $app['config']['database']['password'],
            'charset' => 'utf8',
            'collation' => 'utf8_unicode_ci',
            'prefix' => '',
        ]);

        $this->capsule->bootEloquent();
        $this->capsule->getConnection()->beginTransaction();
        parent::setUp();
    }

    public function tearDown()
    {
        $this->capsule->getConnection()->rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testDoneIsBooleanFalse()
    {
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => false
        ]);
        $todo->save();
        $this->assertSame($todo->done, false);
    }

    public function testDoneIsBooleanTrue()
    {
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => true
        ]);
        $todo->save();
        $this->assertSame($todo->done, true);
    }

    public function testDoneIsStringFalse()
    {
        $this->expectException(ValidationException::class);
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => 'false'
        ]);
        $todo->save();
    }

    public function testDoneIsStringTrue()
    {
        $this->expectException(ValidationException::class);
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => 'true'
        ]);
        $todo->save();
    }

    public function testDoneIsTruthyInteger()
    {
        $this->expectException(ValidationException::class);
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => 1
        ]);
        $todo->save();
    }

    public function testDoneIsFalsyInteger()
    {
        $this->expectException(ValidationException::class);
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => 0
        ]);
        $todo->save();
    }

    public function testDoneIsNull()
    {
        $this->expectException(ValidationException::class);
        $todo = new Todo([
            'description' => 'test',
            'user_id' => 1,
            'done' => null
        ]);
        $todo->save();
    }
}